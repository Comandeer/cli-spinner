/*! @comandeer/cli-spinner v0.3.0 | (c) 2021 Comandeer | MIT license (see LICENSE) */
import{Writable as t,Duplex as e}from"stream";import r from"console-control-strings";const s=["/","-","\\","|"];const i=Symbol("timeout"),n=Symbol("currentFrame"),o=Symbol("showing"),a=Symbol("isInteractive"),h=r.gotoSOL()+r.eraseLine();class u{constructor({stdout:r=process.stderr,label:h="",spinner:u=s,interval:m=80}={}){if(!((l=r)instanceof t||l instanceof e))throw new TypeError("Custom stdout must be a valid writable/duplex stream");var l;if("number"!=typeof m)throw new TypeError("Custom interval must be a valid number");if("string"!=typeof h)throw new TypeError("Custom label must be a valid string");if(!function(t){return Array.isArray(t)&&t.every((t=>"string"==typeof t))}(u))throw new TypeError("Custom spinner must be a valid array of strings");this.stdout=r,this.label=h,this.spinner=u,this.interval=m,this[i]=null,this[n]=0,this[o]=!1,this[a]=function(t){const e="CI"in process.env,r="dumb"===process.env.TERM;return t.isTTY&&!e&&!r}(this.stdout)}async show(){if(!this[a]||this[o])return;const t=()=>{const e=this._prepareSpinnerFrame();this._requestRenderFrame(e).then((()=>{this[i]=setTimeout(t,this.interval)}))};this[o]=!0,this._requestRenderFrame(r.hideCursor()).then(t)}async hide(){this[o]&&(this[i]&&clearTimeout(this[i]),this._requestRenderFrame(h+r.showCursor()).then((()=>{this[n]=0,this[o]=!1})))}_prepareSpinnerFrame(){const t=this.spinner[this[n]++%this.spinner.length];return`${h+t} ${this.label}`}_requestRenderFrame(t){return new Promise((e=>{if(this.stdout.write(t,"utf8"))return e();this.stdout.once("drain",e)}))}}export{u as default};
//# sourceMappingURL=cli-spinner.mjs.map
