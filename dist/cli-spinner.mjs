/*! @comandeer/cli-spinner v0.3.2 | (c) 2021 Comandeer | MIT license (see LICENSE) */
import{Writable as t,Duplex as r}from"stream";import e from"console-control-strings";const s=["/","-","\\","|"];const i=Symbol("timeout"),n=Symbol("currentFrame"),o=Symbol("showing"),a=Symbol("isInteractive"),u=e.gotoSOL()+e.eraseLine();class h{constructor({stdout:e=process.stderr,label:u="",spinner:h=s,interval:m=80}={}){if(!((l=e)instanceof t||l instanceof r))throw new TypeError("Custom stdout must be a valid writable/duplex stream");var l;if("number"!=typeof m)throw new TypeError("Custom interval must be a valid number");if("string"!=typeof u)throw new TypeError("Custom label must be a valid string");if(!function(t){return Array.isArray(t)&&t.every((t=>"string"==typeof t))}(h))throw new TypeError("Custom spinner must be a valid array of strings");this.stdout=e,this.label=u,this.spinner=h,this.interval=m,this[i]=null,this[n]=0,this[o]=!1,this[a]=function(t){const r="CI"in process.env,e="dumb"===process.env.TERM;return t.isTTY&&!r&&!e}(this.stdout)}async show(){if(!this[a]||this[o])return;const t=async()=>{const r=this._prepareSpinnerFrame();await this._requestRenderFrame(r),this[i]=setTimeout(t,this.interval)};return this[o]=!0,await this._requestRenderFrame(e.hideCursor()),t()}async hide(){this[o]&&(this[i]&&clearTimeout(this[i]),await this._requestRenderFrame(u+e.showCursor()),this[n]=0,this[o]=!1)}_prepareSpinnerFrame(){const t=this.spinner[this[n]++%this.spinner.length];return`${u+t} ${this.label}`}_requestRenderFrame(t){return new Promise((r=>{if(this.stdout.write(t,"utf8"))return r();this.stdout.once("drain",r)}))}}export{h as default};
//# sourceMappingURL=cli-spinner.mjs.map
